// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_deer/shop/models/user_entity.dart';
import 'package:flutter_deer/generated/json/user_entity_helper.dart';
import 'package:flutter_deer/goods/models/asset_options_entity.dart';
import 'package:flutter_deer/generated/json/asset_options_entity_helper.dart';
import 'package:flutter_deer/account/models/city_entity.dart';
import 'package:flutter_deer/generated/json/city_entity_helper.dart';
import 'package:flutter_deer/order/models/asset_entity.dart';
import 'package:flutter_deer/generated/json/asset_entity_helper.dart';
import 'package:flutter_deer/account/models/bank_entity.dart';
import 'package:flutter_deer/generated/json/bank_entity_helper.dart';
import 'package:flutter_deer/shop/models/account_entity.dart';
import 'package:flutter_deer/generated/json/account_entity_helper.dart';
import 'package:flutter_deer/shop/models/login_entity.dart';
import 'package:flutter_deer/generated/json/login_entity_helper.dart';
import 'package:flutter_deer/goods/models/goods_sort_entity.dart';
import 'package:flutter_deer/generated/json/goods_sort_entity_helper.dart';
import 'package:flutter_deer/order/models/search_entity.dart';
import 'package:flutter_deer/generated/json/search_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;
			case AssetOptionsEntity:
				return assetOptionsEntityFromJson(data as AssetOptionsEntity, json) as T;
			case AssetOptionsAreas:
				return assetOptionsAreasFromJson(data as AssetOptionsAreas, json) as T;
			case AssetOptionsEmployees:
				return assetOptionsEmployeesFromJson(data as AssetOptionsEmployees, json) as T;
			case AssetOptionsAccounts:
				return assetOptionsAccountsFromJson(data as AssetOptionsAccounts, json) as T;
			case AssetOptionsCompanies:
				return assetOptionsCompaniesFromJson(data as AssetOptionsCompanies, json) as T;
			case AssetOptionsDeptTree:
				return assetOptionsDeptTreeFromJson(data as AssetOptionsDeptTree, json) as T;
			case AssetOptionsDeptTreeChildren:
				return assetOptionsDeptTreeChildrenFromJson(data as AssetOptionsDeptTreeChildren, json) as T;
			case AssetOptionsDeptTreeChildrenChildren:
				return assetOptionsDeptTreeChildrenChildrenFromJson(data as AssetOptionsDeptTreeChildrenChildren, json) as T;
			case AssetOptionsAssetTypeTree:
				return assetOptionsAssetTypeTreeFromJson(data as AssetOptionsAssetTypeTree, json) as T;
			case AssetOptionsAssetTypeTreeChildren:
				return assetOptionsAssetTypeTreeChildrenFromJson(data as AssetOptionsAssetTypeTreeChildren, json) as T;
			case AssetOptionsSpecsTree:
				return assetOptionsSpecsTreeFromJson(data as AssetOptionsSpecsTree, json) as T;
			case AssetOptionsSpecsTreeChildren:
				return assetOptionsSpecsTreeChildrenFromJson(data as AssetOptionsSpecsTreeChildren, json) as T;
			case AssetOptionsSpecsTreeChildrenDataRef:
				return assetOptionsSpecsTreeChildrenDataRefFromJson(data as AssetOptionsSpecsTreeChildrenDataRef, json) as T;
			case CityEntity:
				return cityEntityFromJson(data as CityEntity, json) as T;
			case AssetEntity:
				return assetEntityFromJson(data as AssetEntity, json) as T;
			case AssetItems:
				return assetItemsFromJson(data as AssetItems, json) as T;
			case BankEntity:
				return bankEntityFromJson(data as BankEntity, json) as T;
			case AccountEntity:
				return accountEntityFromJson(data as AccountEntity, json) as T;
			case AccountUser:
				return accountUserFromJson(data as AccountUser, json) as T;
			case AccountUserPermissions:
				return accountUserPermissionsFromJson(data as AccountUserPermissions, json) as T;
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;
			case GoodsSortEntity:
				return goodsSortEntityFromJson(data as GoodsSortEntity, json) as T;
			case SearchEntity:
				return searchEntityFromJson(data as SearchEntity, json) as T;
			case SearchItems:
				return searchItemsFromJson(data as SearchItems, json) as T;
			case SearchItemsOwner:
				return searchItemsOwnerFromJson(data as SearchItemsOwner, json) as T;
			case SearchItemsLicense:
				return searchItemsLicenseFromJson(data as SearchItemsLicense, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			case AssetOptionsEntity:
				return assetOptionsEntityToJson(data as AssetOptionsEntity);
			case AssetOptionsAreas:
				return assetOptionsAreasToJson(data as AssetOptionsAreas);
			case AssetOptionsEmployees:
				return assetOptionsEmployeesToJson(data as AssetOptionsEmployees);
			case AssetOptionsAccounts:
				return assetOptionsAccountsToJson(data as AssetOptionsAccounts);
			case AssetOptionsCompanies:
				return assetOptionsCompaniesToJson(data as AssetOptionsCompanies);
			case AssetOptionsDeptTree:
				return assetOptionsDeptTreeToJson(data as AssetOptionsDeptTree);
			case AssetOptionsDeptTreeChildren:
				return assetOptionsDeptTreeChildrenToJson(data as AssetOptionsDeptTreeChildren);
			case AssetOptionsDeptTreeChildrenChildren:
				return assetOptionsDeptTreeChildrenChildrenToJson(data as AssetOptionsDeptTreeChildrenChildren);
			case AssetOptionsAssetTypeTree:
				return assetOptionsAssetTypeTreeToJson(data as AssetOptionsAssetTypeTree);
			case AssetOptionsAssetTypeTreeChildren:
				return assetOptionsAssetTypeTreeChildrenToJson(data as AssetOptionsAssetTypeTreeChildren);
			case AssetOptionsSpecsTree:
				return assetOptionsSpecsTreeToJson(data as AssetOptionsSpecsTree);
			case AssetOptionsSpecsTreeChildren:
				return assetOptionsSpecsTreeChildrenToJson(data as AssetOptionsSpecsTreeChildren);
			case AssetOptionsSpecsTreeChildrenDataRef:
				return assetOptionsSpecsTreeChildrenDataRefToJson(data as AssetOptionsSpecsTreeChildrenDataRef);
			case CityEntity:
				return cityEntityToJson(data as CityEntity);
			case AssetEntity:
				return assetEntityToJson(data as AssetEntity);
			case AssetItems:
				return assetItemsToJson(data as AssetItems);
			case BankEntity:
				return bankEntityToJson(data as BankEntity);
			case AccountEntity:
				return accountEntityToJson(data as AccountEntity);
			case AccountUser:
				return accountUserToJson(data as AccountUser);
			case AccountUserPermissions:
				return accountUserPermissionsToJson(data as AccountUserPermissions);
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			case GoodsSortEntity:
				return goodsSortEntityToJson(data as GoodsSortEntity);
			case SearchEntity:
				return searchEntityToJson(data as SearchEntity);
			case SearchItems:
				return searchItemsToJson(data as SearchItems);
			case SearchItemsOwner:
				return searchItemsOwnerToJson(data as SearchItemsOwner);
			case SearchItemsLicense:
				return searchItemsLicenseToJson(data as SearchItemsLicense);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}	else if(type == (AssetOptionsEntity).toString()){
			return AssetOptionsEntity().fromJson(json);
		}	else if(type == (AssetOptionsAreas).toString()){
			return AssetOptionsAreas().fromJson(json);
		}	else if(type == (AssetOptionsEmployees).toString()){
			return AssetOptionsEmployees().fromJson(json);
		}	else if(type == (AssetOptionsAccounts).toString()){
			return AssetOptionsAccounts().fromJson(json);
		}	else if(type == (AssetOptionsCompanies).toString()){
			return AssetOptionsCompanies().fromJson(json);
		}	else if(type == (AssetOptionsDeptTree).toString()){
			return AssetOptionsDeptTree().fromJson(json);
		}	else if(type == (AssetOptionsDeptTreeChildren).toString()){
			return AssetOptionsDeptTreeChildren().fromJson(json);
		}	else if(type == (AssetOptionsDeptTreeChildrenChildren).toString()){
			return AssetOptionsDeptTreeChildrenChildren().fromJson(json);
		}	else if(type == (AssetOptionsAssetTypeTree).toString()){
			return AssetOptionsAssetTypeTree().fromJson(json);
		}	else if(type == (AssetOptionsAssetTypeTreeChildren).toString()){
			return AssetOptionsAssetTypeTreeChildren().fromJson(json);
		}	else if(type == (AssetOptionsSpecsTree).toString()){
			return AssetOptionsSpecsTree().fromJson(json);
		}	else if(type == (AssetOptionsSpecsTreeChildren).toString()){
			return AssetOptionsSpecsTreeChildren().fromJson(json);
		}	else if(type == (AssetOptionsSpecsTreeChildrenDataRef).toString()){
			return AssetOptionsSpecsTreeChildrenDataRef().fromJson(json);
		}	else if(type == (CityEntity).toString()){
			return CityEntity().fromJson(json);
		}	else if(type == (AssetEntity).toString()){
			return AssetEntity().fromJson(json);
		}	else if(type == (AssetItems).toString()){
			return AssetItems().fromJson(json);
		}	else if(type == (BankEntity).toString()){
			return BankEntity().fromJson(json);
		}	else if(type == (AccountEntity).toString()){
			return AccountEntity().fromJson(json);
		}	else if(type == (AccountUser).toString()){
			return AccountUser().fromJson(json);
		}	else if(type == (AccountUserPermissions).toString()){
			return AccountUserPermissions().fromJson(json);
		}	else if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}	else if(type == (GoodsSortEntity).toString()){
			return GoodsSortEntity().fromJson(json);
		}	else if(type == (SearchEntity).toString()){
			return SearchEntity().fromJson(json);
		}	else if(type == (SearchItems).toString()){
			return SearchItems().fromJson(json);
		}	else if(type == (SearchItemsOwner).toString()){
			return SearchItemsOwner().fromJson(json);
		}	else if(type == (SearchItemsLicense).toString()){
			return SearchItemsLicense().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsEntity>[] is M){
			return data.map<AssetOptionsEntity>((e) => AssetOptionsEntity().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsAreas>[] is M){
			return data.map<AssetOptionsAreas>((e) => AssetOptionsAreas().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsEmployees>[] is M){
			return data.map<AssetOptionsEmployees>((e) => AssetOptionsEmployees().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsAccounts>[] is M){
			return data.map<AssetOptionsAccounts>((e) => AssetOptionsAccounts().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsCompanies>[] is M){
			return data.map<AssetOptionsCompanies>((e) => AssetOptionsCompanies().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsDeptTree>[] is M){
			return data.map<AssetOptionsDeptTree>((e) => AssetOptionsDeptTree().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsDeptTreeChildren>[] is M){
			return data.map<AssetOptionsDeptTreeChildren>((e) => AssetOptionsDeptTreeChildren().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsDeptTreeChildrenChildren>[] is M){
			return data.map<AssetOptionsDeptTreeChildrenChildren>((e) => AssetOptionsDeptTreeChildrenChildren().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsAssetTypeTree>[] is M){
			return data.map<AssetOptionsAssetTypeTree>((e) => AssetOptionsAssetTypeTree().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsAssetTypeTreeChildren>[] is M){
			return data.map<AssetOptionsAssetTypeTreeChildren>((e) => AssetOptionsAssetTypeTreeChildren().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsSpecsTree>[] is M){
			return data.map<AssetOptionsSpecsTree>((e) => AssetOptionsSpecsTree().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsSpecsTreeChildren>[] is M){
			return data.map<AssetOptionsSpecsTreeChildren>((e) => AssetOptionsSpecsTreeChildren().fromJson(e)).toList() as M;
		}	else if(<AssetOptionsSpecsTreeChildrenDataRef>[] is M){
			return data.map<AssetOptionsSpecsTreeChildrenDataRef>((e) => AssetOptionsSpecsTreeChildrenDataRef().fromJson(e)).toList() as M;
		}	else if(<CityEntity>[] is M){
			return data.map<CityEntity>((e) => CityEntity().fromJson(e)).toList() as M;
		}	else if(<AssetEntity>[] is M){
			return data.map<AssetEntity>((e) => AssetEntity().fromJson(e)).toList() as M;
		}	else if(<AssetItems>[] is M){
			return data.map<AssetItems>((e) => AssetItems().fromJson(e)).toList() as M;
		}	else if(<BankEntity>[] is M){
			return data.map<BankEntity>((e) => BankEntity().fromJson(e)).toList() as M;
		}	else if(<AccountEntity>[] is M){
			return data.map<AccountEntity>((e) => AccountEntity().fromJson(e)).toList() as M;
		}	else if(<AccountUser>[] is M){
			return data.map<AccountUser>((e) => AccountUser().fromJson(e)).toList() as M;
		}	else if(<AccountUserPermissions>[] is M){
			return data.map<AccountUserPermissions>((e) => AccountUserPermissions().fromJson(e)).toList() as M;
		}	else if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((e) => LoginEntity().fromJson(e)).toList() as M;
		}	else if(<GoodsSortEntity>[] is M){
			return data.map<GoodsSortEntity>((e) => GoodsSortEntity().fromJson(e)).toList() as M;
		}	else if(<SearchEntity>[] is M){
			return data.map<SearchEntity>((e) => SearchEntity().fromJson(e)).toList() as M;
		}	else if(<SearchItems>[] is M){
			return data.map<SearchItems>((e) => SearchItems().fromJson(e)).toList() as M;
		}	else if(<SearchItemsOwner>[] is M){
			return data.map<SearchItemsOwner>((e) => SearchItemsOwner().fromJson(e)).toList() as M;
		}	else if(<SearchItemsLicense>[] is M){
			return data.map<SearchItemsLicense>((e) => SearchItemsLicense().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}